{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Programming Exercises - Sheet 2","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"rWbLOjxrlySi","colab_type":"text"},"cell_type":"markdown","source":["# Programming Exercises - Sheet 2\n","\n","Topics that you should know before attempting this problem sheet:\n","\n","- Arithmetic operations (+, -, /, etc.)\n","- Integers and floating points\n","- Variables\n","- Asking for user input (the `input` function)\n","- `if` and `else` statements\n","- Then `len` function\n","- String indexing\n","- The `for`-loop\n","- The `while`-loop\n","- Lists\n","- Comparison operations (<, >, <=, >=, ==, !=)\n","- Logical operations (`and`, `or`)\n","\n","If you are unsure about some of these topics, don't let that stop you! Try *googling* about whatever gaps you have in your programming knowledge."]},{"metadata":{"id":"3UFc1rQQq5Kr","colab_type":"text"},"cell_type":"markdown","source":["### Problem 1 - Large sums\n","\n","Using a *for*-loop, create program that prints the sum of the numbers from 1 to 100.\n","\n","_Note 1:_ In Python there's a useful shorthand for the statement\n","\n","\tvariable = variable + some_other_variable\n","\n","Instead of that, we can write\n","\n","\tvariable += some_other_variable\n","\n","This trick actually works for the other operators as well (-, /. \\*):\n","\n","\tvariable -= some_other_variable\n","\tvariable *= some_other_variable\n","\tvariable /= some_other_variable\n","  \n","  *Note 2:* When you want to make a loop through a sequence of numbers, you use `for` and the `range` function. You can specify what range of numbers you want to loop through like this:\n","  \n","      for i in range(6, 10):\n","          print(i)\n","          \n","This prints out:\n","\n","      6\n","      7\n","      8\n","      9"]},{"metadata":{"id":"fdIKqNDKsf_d","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Vht8IMdHskuO","colab_type":"text"},"cell_type":"markdown","source":["### Problem 2 - Printing numbers backwards\n","\n","Create a for-loop that prints the numbers backwards from 10 to 1.\n","\n","_Note:_ In programming there's always many different ways to complete a single\n","task. You know enough to be able to complete this task already, using simple\n","arithmetic. _But_, there is extra functionality within Python that\n","could allow you to complete this task in a more streamlined way. Use Google to\n","investigate what the function _range_ can do."]},{"metadata":{"id":"DkqbC2cFsp7U","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"qtpJ4ewItYZV","colab_type":"text"},"cell_type":"markdown","source":["### Problem 3 - Comparing string lengths\n","\n","Write a program that asks a user to type in two different strings, store them in variables _string1_ and _string2_. The program should then say which string is longer, or say if the strings are equally long."]},{"metadata":{"id":"WOCA78OZsydu","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"VR1X83wNtXv_","colab_type":"text"},"cell_type":"markdown","source":["### Problem 4 - Advanced calculator (Hard)\n","\n","Write a calculator that can both add and subtract. The program should repeatedly\n","ask the user for input, until the user enters the word “stop”. To add a number\n","(4, for example), the user should enter “+ 4”. The subtract a number, the user\n","should enter “- 4”. Example output of the program:\n","\n","    Enter a calculator command (enter \"stop\" to quit):\n","    >>> + 26\n","    Enter a calculator command (enter \"stop\" to quit):\n","    >>> - 61\n","    Enter a calculator command (enter \"stop\" to quit):\n","    >>> + 232\n","    Enter a calculator command (enter \"stop\" to quit):\n","    >>> + 973\n","    Enter a calculator command (enter \"stop\" to quit):\n","    >>> - 5\n","    Enter a calculator command (enter \"stop\" to quit):\n","    stop\n","\n","    The sum is:\n","    1165\n","\n","The main body of the program should be made of a _while_ loop. The trickiest\n","part of the task will be to decide when to add or subtract a number based on\n","user input. You can do this using string indexing as well as the _int_ function,\n","that converts a string into a number."]},{"metadata":{"id":"1ViW_TQAsyf0","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"peNP9BybtxJu","colab_type":"text"},"cell_type":"markdown","source":["### Problem 5 - Printing a pyramid\n","\n","You can create long piece of text by making repeated copies of a short piece of text using the multiplication symbol \"\\*\", like this:\n","\n","    >>>  \"abc\"*10\n","    \"abcabcabcabcabcabcabcabcabcabc\"\n","\n","Using this technique and a for-loop, create a program that prints this:\n","\n","    A\n","    AA\n","    AAA\n","    AAAA\n","    AAAAA"]},{"metadata":{"id":"nXLO7qYisyhy","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"lW_A2BRvt9Si","colab_type":"text"},"cell_type":"markdown","source":["### Problem 6 - Printing a pyramid (part 2) (Hard)\n","\n","This is an example of a \"nested\" for-loop:\n","\n","    for i in range(1,10):\n","    \tfor j in range(1, 5):\n","    \t\tprint(i + j)\n","\n","_Note:_ It's important to use different looping variables when you nest _for_-loops. Notice that we've used _i_ in the outer loop, and _j_ in the inner loop.\n","\n","The result of this piece of code is that the inner for-loop is run 10 times (which means that there’s a total of 10*5  = 50 print commands). In other words, it’s a “loop of a loop”. Using the nested for-loop, and the code you made in the previous question, create a program that prints this:\n","\n","    A\n","    AA\n","    AAA\n","    AAAA\n","    AAAAA\n","    AAAA\n","    AAA\n","    AA\n","    A\n","    AA\n","    AAA\n","    AAAA\n","    AAAAA\n","    AAAA\n","    AAA\n","    AA\n","    A\n","    AA\n","    AAA\n","    AAAA\n","    AAAAA\n","    AAAA\n","    AAA\n","    AA\n","    A"]},{"metadata":{"id":"2ZRFoJiG0mwS","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"_hnC0qNMusBz","colab_type":"text"},"cell_type":"markdown","source":["### Problem 7 - Times-table\n","\n","Using the _input_ function, create a program that asks for a number and then prints the times table for that number.\n","\n","You should get something like this when you run the program:\n","\n","\tWhich number?\n","\t>>> 3\n","\n","\tHere’s the times-table for 3:\n","\t3\n","\t6\n","\t9\n","\t12\n","\t15\n","\t18\n","\t21\n","\t24\n","\t27\n","\t30"]},{"metadata":{"id":"yB9bXu_jurg_","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"g_snDWWCvKaP","colab_type":"text"},"cell_type":"markdown","source":["### Problem 8 - Times-table in lists\n","\n","Redo problem 5, but now the times-tables should be stored in lists. You should also add code that sums up the numbers in the times-table as well. The output should look like this:\n","\n","\tWhich number?\n","\t>>> 3\n","\n","\tHere’s the times-table for 3:\n","\t[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n","\n","\tHere's the sum of the times-table for 3:\n","\t165"]},{"metadata":{"id":"PutpkqSfvfXV","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"g9KpCQDGxYy0","colab_type":"text"},"cell_type":"markdown","source":["### Problem 9 - Keeping track of club-members\n","\n","You have a list of members in a club\n","\n","    club_members = [\"Mark\", \"Ishan\", \"Harjeet\", \"Armando\", \"Laura\", \"Haruki\", \"Linus\"]\n","\n","Write a program that lets a user check if a particular person is in the club.\n","You should use a _while_-loop to keep asking to user over and over. Let the user end the\n","program by entering a command like _\"quit\"_.\n","\n","_Note:_ A good way to make while-loops that terminate based on user input is in the following format:\n","\n","\trunning = True\n","\twhile running:\n","\t\tinp = input(\"?\")\n","\t\tif inp == \"quit\":\n","\t\t\trunning = False\n","\t\t\tcontinue\n","\n","\t\t# Do stuff\n","\n","The while-loop will run as long as _running_ is True. If the user enters \"quit\", _running_ will be set to false and the loop will terminate."]},{"metadata":{"id":"cNJ9kkvExlWB","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"TUbIoXIT6G7X","colab_type":"text"},"cell_type":"markdown","source":["### Problem 10 - Improving some old code\n","\n","Here's a problem from a previous problem sheet:\n","\n","> Copy the following code:\n","\n","        my_age = 13\n","        my_money = 10\n","\n","> Create a program that tells you whether you are old enough to watch a movie rated 12A, and costs 7 pounds per ticket. To make this program you’ll have to use two if-statements, one inside the other.\n","\n","With your new-found knowledge of boolean expressions, you should now be able to complete this task with a _single_ if-statement. To do this you'll have to use\n","boolean operators."]},{"metadata":{"id":"hnmiL0Xy6HGk","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"stD2LAHc6HOw","colab_type":"text"},"cell_type":"markdown","source":["### Problem 11 - Classifying value types (Hard)\n","\n","So far we've come across a lot of different kinds of values: integers, floating-point numbers (floats), booleans, strings, lists and dictionaries. We say that they're all of different _types_ or _class_. To find the type of some value, we use the _type_ function, like this:\n","\n","    >>> type(23)\n","    <class 'int'>\n","    >>> type(\"a string\")\n","    <class 'str'>\n","    >>> type([1,2,3])\n","    <class 'list'>\n","    >>> type(False)\n","    <class 'bool'>\n","\n","\n","We can check whether a value is of a certain type like this:\n","\n","    >>> type(2) == int\n","    True\n","    >>> type(2) == str\n","    False\n","\n","We see that *2* is of the type _int_, but not _str_ (short for string). Here's how you check the other types of values\n","\n","    >>> type(3.14) == float\n","    True\n","    >>> type(False) == bool\n","    True\n","    >>> type(\"a string\") == str\n","    True\n","    >>> type([1,2,3]) == list\n","    True\n","    >>> type({\"key\" : \"value\"}) == dict\n","    True\n","\n","Using the *type* function, and a `for`-loop, convert a list of various types of values\n","\n","    my_values = [42, \"Hello\", 0.52, {\"a\" : \"dictionary\"}, True, [2, 54, 1], False, 3.14, 62, \"World\", [2,1]]\n","\n","into a list describing what types each value has\n","\n","    my_types = [\"Integer\", \"String\", \"Float\", \"Dictionary\", \"Boolean\", \"List\", \"Boolean\", \"Float\", \"Integer\", \"String\", \"List\"]"]},{"metadata":{"id":"PTJbQc6w6HYs","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"QIa7fvx26Hgv","colab_type":"text"},"cell_type":"markdown","source":["### Problem 12 - Food in your fridge\n","\n","You have a list of food items in your fridge (come up with your own list!):\n","\n","\tstuff_in_fridge = [\"Cheese\", \"Milk\", \"Chicken\", \"Yoghurt\"]\n","\n","Write a program that asks what you want to eat, and once you've chosen a food-item, will remove it from the list. Example output:\n","\n","\tYou have these items in your fridge:\n","\t - Milk\n","\t - Chicken\n","\t - Yoghurt\n","\n","\tWhat do you want to eat?\n","\t>>> Cheese\n","\n","\tYou have these items in your fridge:\n","\t - Milk\n","\t - Chicken\n","\t - Yoghurt\n","\n","\tWhat do you want to eat?\n","\t>>> Yoghurt\n","\n","\tYou have these items in your fridge:\n","\t - Milk\n","\t - Chicken\n","\n","\tWhat do you want to eat?\n","\t>>> Pizza\n","\n","\tYou don't have Pizza!\n","\n","\tYou have these items in your fridge:\n","\t - Milk\n","\t - Chicken\n","\n","\tWhat do you want to eat?\n","\t>>> Milk\n","\n","\tYou have these items in your fridge:\n","\t - Chicken\n","\n","\tWhat do you want to eat?\n","\t>>> Chicken\n","\n","\tYour fridge is now empty!"]},{"metadata":{"id":"CgmZUKzU6HnX","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}